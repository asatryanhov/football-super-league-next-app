import { NextRequest, NextResponse } from "next/server";

export async function GET(request: NextRequest) {
  try {
    console.log("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...");

    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à cron endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const cronUrl = new URL("/api/cron/update-stats", request.url);

    const response = await fetch(cronUrl.toString(), {
      method: "GET",
      headers: {
        authorization: `Bearer ${process.env.CRON_SECRET || "test"}`,
      },
    });

    if (!response.ok) {
      throw new Error(`Cron endpoint failed: ${response.status}`);
    }

    const cronResult = await response.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ store (—ç—Ç–æ —Å–ª–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ)
    const testResponse = {
      timestamp: new Date().toISOString(),
      cronJobStatus: "success",
      cronResult,
      storeIntegration: {
        note: "Store –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
        mechanism:
          "Next.js –∫—ç—à –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è, –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ ServerComponent -> ClientComponent -> Store",
      },
      recommendations: [
        "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cron job",
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–æ–≤ Store",
        "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ CRON_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ environment variables",
      ],
    };

    return NextResponse.json(testResponse);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
    return NextResponse.json(
      {
        error: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        details: error instanceof Error ? error.message : "Unknown error",
        timestamp: new Date().toISOString(),
      },
      { status: 500 }
    );
  }
}
